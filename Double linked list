class Node:
    def __init__(self, data):
       self.data = data
       self.prev = None
       self.next=None

class DoubleLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
 
    def create(self, data):
        if self.tail is None:
            self.head = Node(data)
            self.tail = self.head
        else:
             cur=Node(data)
             self.tail.next = cur
             cur.prev=self.tail
             self.tail=cur
 
    def display(self):
        cur = self.head
        if cur==None:
              print("Linked list is empty")
        else:
            while cur is not None:
               print(cur.data, end = '-> ')
               cur= cur.next

    def insert_at_begin(self,data):
        cur=Node(data)
        self.head.prev=cur
        cur.next=self.head
        self.head=cur
        
    def insert_at_end(self,data):
        cur=Node(data)
        self.tail.next=cur
        cur.prev=self.tail
        self.tail=cur
        
    def insert_at_pos(self,pos,data):
        cur=Node(data)
        i=1
        y=self.head
        while i<pos:
            x=y
            y=y.next
            i+=1
        x.next=cur
        cur.prev=x
        y.prev=cur
        cur.next=y  
    
    def delete_at_begin(self):
        cur=self.head
        self.head=self.head.next
        cur.next=None
        self.head.prev=None
        print("deleted data", cur.data)
    
    def delete_at_end(self):
        cur=self.tail
        self.tail=self.tail.prev
        cur.prev=None
        self.tail.next=None
        print("deleted data", cur.data)
    
    def delete_at_pos(self,pos):
        cur=self.head
        i=1
        while i<pos:
            temp=cur
            cur=cur.next
            i+=1
        temp.next=cur.next
        cur.next.prev=temp
        cur.next=cur.prev=None
        print("deleted data",cur.data)
    
    def search(self,ele):
        cur=self.head
        flag=0
        while cur is not None:
            if(ele==cur.data):
                flag=1
                break
            cur=cur.next
        if flag==1:
            print("element found")
        else:
            print("element not found")

    def count(self):
        cur=self.head
        c=0
        while cur is not None:
            c+=1
            cur=cur.next
        print(c)
      
while True:
    print("\n1.Create 2.Insert at begin 3.Insert at end 4.Insert at postion 5.Display")
    print(" 6.delete at begin 7.delete at end 8.delete at pos 9. search 10. count 11.Exit \n")
    ch=int(input('enter your choice'))
    if ch==1:
        # Creation of linked list
        dll =DoubleLinkedList()
        n = int(input('How many elements would you like to add? '))
        for i in range(n):
            data = int(input('Enter data item: '))
            dll.create(data)
    elif ch==2:
        # insert at begining
        x=int(input('Enter an element to insert at begin '))
        dll.insert_at_begin(x)
    elif ch==3:
        #insert at end
        x=int(input('Enter an element to insert at end '))
        dll.insert_at_end(x)
    elif ch==4:
        #insert at position
        pos=int(input('Enter position of insertion'))
        x=int(input('Enter an element to insert at position '))
        dll.insert_at_pos(pos,x)
    elif ch==5:
        #display
        print('The linked list: ', end = '')
        dll.display()
    elif ch==6:
        dll.delete_at_begin()
    elif ch==7:
        dll.delete_at_end()
    elif ch==8:
        pos=int(input('Enter position of deletion'))
        dll.delete_at_pos(pos)
    elif ch==9:
        ele=int(input('Enter element to be searched'))
        dll.search(ele)
    elif ch==10:
        dll.count()
    elif ch==11:
        exit()
   
OUTPUT:-
1.Create 2.Insert at begin 3.Insert at end 4.Insert at postion 5.Display
